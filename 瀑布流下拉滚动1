import React, { Component } from 'react'
import Masonry from 'masonry-layout'//瀑布流
import InfiniteScroll from 'react-infinite-scroller' //下拉滚动
import imagesLoaded from 'imagesloaded'
import axios from 'axios'
import './styles.less'

export default class extends Component {
	constructor(props) {
		super(props)
		this.state = {
			data: [],
			page: 1,
			count: '',
		}
		this.loadFunc()
	}
	loadFunc = (page = 1) => {
		const { data, count } = this.state
		if (count && data.length >= count) {
			return false
		}
		axios.get('https://restapi.amap.com/v3/place/text?',
			{
				params: {
					key: 'ada574dcfc85ea2a35fac4d3323f6667',
					keywords: "美食",
					city: "北京",
					page,
					offset: 20,
				}
			}
		)
			.then(res => {
				this.setState({
					data: [...data, ...res.data.pois],
					count: res.count,
				}, () => {
					//图片加载事件
					this.images()
				})
			})
			.catch(err => console.log(err))
	}
	advanceWidth = () => {
		new Masonry(document.querySelector('.pages-hoc'), {
			itemSelector: '.d',
			fitWidth: true,
			columnWidth: '.d',
			gutter: 20,
		})
	}
	images = () => {
		//获取需要加瀑布流的DOM事件
		const el = imagesLoaded('.pages-hoc')
		el.on('always', () => {
			this.advanceWidth()
			//全部加载完成
			console.log('图片已全部加载，或被确认加载失败');
		})
	}
	render() {
		return (
			<div className="box" style={{height:'400px',overflow:'auto'}} >
				<InfiniteScroll
					initialLoad={false} // 不让它进入直接加载
					pageStart={1} // 设置初始化请求的页数
					loadMore={this.loadFunc}  // 监听的ajax请求
					hasMore={true} // 是否继续监听滚动事件 true 监听 | false 不再监听
					useWindow={false} // 不监听 window 滚动条
				>
					<div className="pages-hoc" >
						{
							this.state.data.map((v, key) => (
								<div key={key} className="d">
									<img src={v.photos[0].url} style={{ width: 200, height: 'auto' }} />
								</div>
							))
						}
					</div>
				</InfiniteScroll>
			</div>
		)
	}
}

