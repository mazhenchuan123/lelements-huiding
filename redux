//index.js页面
import { createStore, applyMiddleware, compose, combineReducers } from 'redux'
import promise from 'redux-promise'
import thunk from 'redux-thunk'
import { persistReducer } from 'redux-persist'
import storage from 'redux-persist/lib/storage'
//可以做sessionStorage的数据持久化
import storageSession from 'redux-persist/lib/storage/session'
import autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2'
import { login, home } from './reduce'

// 我要对哪些state做数据持久化
const rootPersistConfig = {
  key: 'root',
  storage: storage,//做sessionStorage的数据持久化吧storage的值改为storageSession
  stateReconciler: autoMergeLevel2,
}

// 单独为 某个 reduce 做数据持久化
const myPersistReducer = combineReducers({
  home:persistReducer(
    rootPersistConfig,
    login
  ),
  // persistReducer 做数据持久化
  login: persistReducer(
    rootPersistConfig,
    login
  ),
})

const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose

const store = createStore(
  myPersistReducer,
  composeEnhancers(applyMiddleware(promise, thunk))
)

export { store }

//reduce
 const inithome = {
    username:[],
    infoData:[],
    user:[]
}


export default function home (state = inithome,action){
    console.log(action,'-----------')
    switch (action.type) {
        case 'HOME':
            return { ...state,username:action.payload}
        case 'DATAS':
            return { ...state,infoData:action.payload}
        case 'GET':
                return { ...state,user:action.payload}
        default:
            return state
    }
}


//reduce抛出页面

import login from'./login'
import home from'./home'
export {
    login,
    home
}


//调用方法action
import request from '../utils/request'
import {get} from '../utils/request'
import qs from 'qs'
import ax from '../services/api'
//home
export function fetchHome(options) {
    return {
      type: 'HOME',
      payload: request(ax.homedata, qs.stringify(options)),
    }
  }
  export function usernameData(options) {
    console.log(options,'++++++++++++')
    return {
      type: 'DATAS',
      payload: options,
    }
  }
  export function userGet(options) {
    return {
      type: 'GET',
      payload: get(ax.get,{params:options}),
    }
  }
